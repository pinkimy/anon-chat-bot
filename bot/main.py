import asyncio
import os

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from dotenv import load_dotenv
from utils.db import add_user, delete_user, get_all_user_ids, init_db

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_PASSWORD = os.getenv("ADMIN_PASS")  # –ø–∞—Ä–æ–ª—å –¥–ª—è /kick –∏ /users

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))  # type: ignore
dp = Dispatcher()

init_db()


@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    add_user(message.from_user.id)  # type: ignore
    await message.answer(
        "‚úÖ –ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–º—É —á–∞—Ç—É. –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –¥—Ä—É–≥–∏–º."
    )


@dp.message(Command("users"))
async def show_users(message: types.Message):
    try:
        args = message.text.replace("/users", "", 1).strip().split()  # type: ignore
        if len(args) != 1:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        if args[0] != ADMIN_PASSWORD:
            raise PermissionError("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

        users = get_all_user_ids()
        if not users:
            return await message.answer("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        await message.answer("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(map(str, users)))
    except PermissionError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π: /users &lt;–ø–∞—Ä–æ–ª—å&gt;")


@dp.message(Command("kick"))
async def kick_user(message: types.Message):
    try:
        args = message.text.replace("/kick", "", 1).strip().split()  # type: ignore
        if len(args) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        user_id_str, password = args

        if password != ADMIN_PASSWORD:
            raise PermissionError("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

        user_id = int(user_id_str)  # –º–æ–∂–µ—Ç –±—Ä–æ—Å–∏—Ç—å ValueError

        delete_user(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã.")
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /kick &lt;user_id&gt; &lt;–ø–∞—Ä–æ–ª—å&gt; (user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)"
        )

    except PermissionError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π: /kick <user_id> <–ø–∞—Ä–æ–ª—å>")


@dp.message(F.text)
async def handle_message(message: types.Message):
    sender_id = message.from_user.id  # type: ignore
    add_user(sender_id)

    recipients = get_all_user_ids(exclude_id=sender_id)
    if not recipients:
        return await message.answer("‚ùó –ù–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.")

    error_shown = False  # —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –æ–¥–∏–Ω —Ä–∞–∑

    for user_id in recipients:
        try:
            await bot.send_message(user_id, f"\n{message.text}")  # type: ignore
        except Exception:
            if not error_shown:
                await message.answer(
                    "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º."
                )
                error_shown = True

    if not error_shown:
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")


@dp.message(F.photo)
async def handle_photo(message: types.Message):
    sender_id = message.from_user.id  # type: ignore
    add_user(sender_id)

    recipients = get_all_user_ids(exclude_id=sender_id)
    if not recipients:
        return await message.answer("‚ùó –ù–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.")

    error_shown = False
    for user_id in recipients:
        try:
            await bot.send_photo(
                chat_id=user_id,  # type: ignore
                photo=message.photo[-1].file_id,  # type: ignore
                caption=message.caption or "",
            )
        except Exception:
            delete_user(user_id)  # type: ignore
            if not error_shown:
                await message.answer(
                    f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã."
                )
                error_shown = True

    if not error_shown:
        await message.answer("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
